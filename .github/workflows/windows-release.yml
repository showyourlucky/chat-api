好的，我们来修改这个 GitHub Actions workflow，使其支持手动触发，并允许在手动触发时指定要创建的 tag 名称，同时保留原有的基于 tag push 的触发机制。

**I am thinking**

> 1.  **理解需求**: 用户想要修改现有的 GitHub Actions workflow。核心要求是：
>     *   增加手动触发 (`workflow_dispatch`) 功能。
>     *   手动触发时，需要能输入一个 `tag_name`。
>     *   在手动触发的工作流执行过程中，要使用这个输入的 `tag_name` 来创建 Git 标签并推送到仓库。
>     *   保留原有的在推送特定 tag 时自动触发 (`on: push: tags:`) 的功能。
>     *   确保构建和发布步骤使用正确的 tag 名称（无论是手动创建的还是自动推送的）。
>     *   输出修改后的完整 workflow YAML 文件。

> 2.  **分析现有触发器**: 当前 workflow 使用 `on: push: tags: ['*', '!*-alpha*']`。这意味着当任何不以 `-alpha` 结尾的 tag 被推送到仓库时，workflow 会自动运行。

> 3.  **添加手动触发器**: 需要在 `on:` 部分加入 `workflow_dispatch` 事件。

> 4.  **为手动触发器添加输入**: `workflow_dispatch` 支持 `inputs`，用于接收用户在手动触发时提供的信息。我们需要一个名为 `tag_name` 的输入字段，用来接收用户想要创建的 tag。

> 5.  **处理标签创建**:
>     *   原 workflow 假设 tag 已经存在（通过 `push` 事件触发）。
>     *   手动触发时，我们需要在 workflow 中添加步骤来创建并推送用户输入的 tag。
>     *   这个创建/推送 tag 的步骤应该 *仅* 在手动触发 (`workflow_dispatch`) 时执行。

> 6.  **区分触发方式**: 可以使用 `github.event_name` 上下文变量来判断 workflow 是如何触发的。如果是 `'workflow_dispatch'`，则执行创建 tag 的步骤；如果是 `'push'`，则跳过。

> 7.  **实现标签创建步骤**:
>     *   需要使用 `git tag` 命令创建本地标签，其值来自 `github.event.inputs.tag_name`。
>     *   需要使用 `git push origin <tag_name>` 将新创建的标签推送到远程仓库。
>     *   这些步骤应放在 `checkout` 之后，但在任何依赖该 tag 的步骤（如构建步骤）之前。

> 8.  **调整构建步骤**: 构建步骤 (`Build Frontend`, `Build Backend`) 使用 `$(git describe --tags)` 获取版本号。
>     *   对于 `push` 触发，这会正确获取到被推送的 tag。
>     *   对于 `workflow_dispatch` 触发，在我们手动创建并推送 tag 之后，`git describe --tags` *应该* 也能正确获取到这个新创建的 tag，因为 `checkout` 配置了 `fetch-depth: 0`（获取完整历史），并且 tag 已经被推送到远程并存在于本地。所以构建步骤本身 *可能* 不需要修改。

> 9.  **调整发布步骤**:
>     *   原发布步骤 `softprops/action-gh-release@v1` 使用 `if: startsWith(github.ref, 'refs/tags/')` 条件。这个条件只对 `push` 触发有效。
>     *   对于 `workflow_dispatch` 触发，`github.ref` 通常是触发工作流的分支（如 `refs/heads/main`），这个 `if` 条件会为 false。
>     *   需要修改 `if` 条件，使其在两种情况下都能运行发布步骤：`if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'`。
>     *   `softprops/action-gh-release` 默认会尝试从 `github.ref` 推断 tag。对于 `workflow_dispatch`，这显然是不对的。我们需要明确告诉 action 使用哪个 tag。
>     *   该 action 有一个 `tag_name` 输入参数。我们需要根据触发方式设置它：
>         *   如果是 `push` 触发，tag 名是 `github.ref_name`。
>         *   如果是 `workflow_dispatch` 触发，tag 名是 `github.event.inputs.tag_name`。
>     *   可以使用条件表达式来设置：`tag_name: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag_name || github.ref_name }}`。

> 10. **权限确认**: 创建和推送 tag 需要 `contents: write` 权限，这在原 workflow 中已经有了，无需修改。

> 11. **整合修改**: 将上述分析整合到最终的 YAML 文件中。

> 12. **输出结果**: 提供修改后的完整 YAML 文件，并解释所做的更改。

Thought for 21 seconds

```yaml
name: Windows Release
permissions:
  contents: write # 需要 write 权限来推送标签和创建 Release

on:
  # 保留原有的 tag push 触发器
  push:
    tags:
      - '*'        # 匹配所有 tag
      - '!*-alpha*' # 排除以 -alpha 结尾的 tag
  # 新增手动触发器
  workflow_dispatch:
    inputs:
      tag_name:
        description: '要创建并发布的 Tag 名称 (例如: v1.0.0)'
        required: true
        type: string

jobs:
  release:
    runs-on: windows-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # 获取所有历史记录，以便 git describe 和 tag 创建能正常工作

      # --- 新增步骤：仅在手动触发时创建并推送 Tag ---
      - name: Create and Push Tag (Manual Trigger Only)
        if: github.event_name == 'workflow_dispatch' # 仅在手动触发时运行
        run: |
          echo "手动触发，创建并推送 Tag: ${{ github.event.inputs.tag_name }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ github.event.inputs.tag_name }} -m "Release ${{ github.event.inputs.tag_name }}"
          git push origin ${{ github.event.inputs.tag_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # --- 结束新增步骤 ---

      - uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Build Frontend
        env:
          CI: ""
        run: |
          # git describe --tags 会获取最近的 tag，无论是推送触发的还是手动创建推送的
          VERSION=$(git describe --tags)
          echo "使用版本: $VERSION"
          cd web-admin
          npm install
          REACT_APP_VERSION=$VERSION npm run build
          cd ..
          cd web-user
          npm install
          REACT_APP_VERSION=$VERSION npm run build
          cd ..

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '>=1.18.0'

      - name: Build Backend
        run: |
          # git describe --tags 同上
          VERSION=$(git describe --tags)
          echo "使用版本: $VERSION"
          go mod download
          go build -ldflags "-s -w -X 'chat-api/common.Version=$VERSION'" -o chat-api.exe

      - name: Release
        uses: softprops/action-gh-release@v1
        # 修改条件：在 tag push 或 手动触发时都运行
        if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
        with:
          files: chat-api.exe
          draft: true
          generate_release_notes: true
          # 明确指定 tag_name，根据触发方式选择
          # 如果是手动触发，使用输入的 tag_name；否则（即 tag push 触发），使用 github.ref_name
          tag_name: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag_name || github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

```

**主要修改说明:**

1.  **添加 `workflow_dispatch` 触发器**:
    *   在 `on:` 部分增加了 `workflow_dispatch`。
    *   定义了一个必需的输入 `tag_name`，允许用户在手动触发时输入要创建的 tag。

2.  **新增 "Create and Push Tag" 步骤**:
    *   这个步骤仅在 `github.event_name == 'workflow_dispatch'` (即手动触发) 时运行。
    *   它使用 `git tag` 和 `git push` 命令，基于用户输入的 `tag_name` (`${{ github.event.inputs.tag_name }}`) 来创建并推送到远程仓库。
    *   配置了 `git config` 以便 action 可以提交。

3.  **调整 "Release" 步骤**:
    *   修改了 `if` 条件，确保无论是 `push` 触发 (原来的 `startsWith(github.ref, 'refs/tags/')`) 还是 `workflow_dispatch` 触发，都会执行 Release 步骤。
    *   增加了 `tag_name` 参数，使用条件表达式 `${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag_name || github.ref_name }}` 来确保 action 使用正确的 tag：
        *   如果是手动触发，使用用户输入的 `tag_name`。
        *   如果是 tag push 触发，使用 `github.ref_name` (即被推送的 tag 名称)。

4.  **构建步骤**: 构建步骤中的 `$(git describe --tags)` 不需要修改。因为在手动触发的情况下，我们先创建并推送了 tag，然后 `git describe --tags` 会找到这个最新的 tag。在 tag push 的情况下，它自然也能找到被推送的 tag。

**如何使用:**

1.  将上述 YAML 内容保存到你的 `.github/workflows/` 目录下的对应文件中 (例如 `release.yml`)。
2.  提交并推送到你的 GitHub 仓库。
3.  现在，你可以在 GitHub 仓库的 "Actions" 标签页下找到 "Windows Release" 这个 workflow。
4.  点击 "Run workflow" 按钮。
5.  你会看到一个输入框，提示你输入 "Tag name to create and release"。
6.  输入你想要创建的 tag (例如 `v1.2.3`)，然后点击 "Run workflow"。
7.  Workflow 将会执行，首先创建并推送你输入的 tag，然后执行后续的构建和发布步骤，最终创建一个使用该 tag 的 Draft Release。

同时，原有的功能依然有效：如果你直接推送一个符合 `*` 且不符合 `*-alpha*` 规则的 tag (例如 `git tag v1.2.4 && git push origin v1.2.4`)，workflow 也会自动触发并执行发布。
